<!DOCTYPE html>
<html>
<head>
    <meta name="keywords" content="git,git-gui,gui,client,tool,repository,vcs,dvcs">
    <title>Git-GUI</title>
    <link rel="stylesheet" href="styles/base.css" />
    <link rel="stylesheet" href="styles/styles.css" />
</head>
<body>
    <nav id="menu">
        <ul>
            <li>Home</li>
            <li>Documentation</li>
            <li>Download</li>
            <li><a href="https://github.com/kaisellgren/Git-GUI">Github page</a></li>
            <li><a href="https://github.com/kaisellgren/Git-GUI/issues">Report issues</a></li>
            <li>Donate</li>
        </ul>
    </nav>

    <header id="header">
        <div class="container">
            <div class="title">
                <h1>Git-GUI</h1>
                <span>A powerful Git tool for Windows.</span>
            </div>

            <img src="images/gitgui.png" />
        </div>
    </header>

    <div id="header-shadow">
        <p id="warning-text">Please note that Git-GUI is a work in progress. The first version has not yet been released.</p>
    </div>

    <div class="feature-box">
        <div class="feature-image-left">
            <img src="images/graph.png" class="shadow" />

            <h2>Visualize repository history</h2>
            <blockquote>A picture is worth a thousand words.</blockquote>
            <p>Branches are one of Git's advantages. A visual representation of the repository with its branches makes branching easier in terms of how they are merged, how they branch out or how they are related to each other.</p>
            <p>Visual presentations can make complex scenarios simple. It also makes us more confident, because we trust what we see. Even if you are used to Git in every possible way, it's always nice to have a visual confirmation of the current condition of your repository.</p>
        </div>

        <div class="feature-image-right">
            <img src="images/dashboard.png" class="shadow" />

            <h2>The Dashboard</h2>
            <p>When you open a new tab, you are presented a screen called the Dashboard. This lets you see the most recently opened repositories and lets you create / open new repositories.</p>
            <p>In future versions, the Dashboard will have information about the latest version of Git-GUI, possible statistics of your repositories or even issue tracker / code review integration with latest activity.</p>
        </div>

        <div>
            <h2>Tabbed repositories</h2>
            <img src="images/tabs.png" class="shadow" />

            <p>Being able to open multiple repositories and working with all of them in one single application with a flawless support for tabs is productive.</p>
            <p>Tabs work as you would expect; pressing the <code>X</code> button closes the tab, pressing the <code>+</code> button opens a new tab. Shortcuts are the same among web browsers: <code>ctrl + t</code> for a new tab and <code>ctrl + w</code> to close a tab. Switching tabs can be done either via clicking or pressing <code>ctrl + tab</code>.</p>
            <p>When the program is maximized to take the full size of the screen, the tabs are located at the very top of the screen leaving no pixels in between the tab and the screen top edge. This behavior matches modern browsers and allows for easier "aiming".</p>
        </div>

        <div class="feature-image-left">
            <img src="images/sidebar.png" class="shadow" />

            <h2>The useful sidebar</h2>
            <p>Git-GUI features a sidebar that gives you a quick access to any tag, branch, remote, stash or even a submodule.</p>
            <p>Many Git developers find themselves constantly forgetting that they have stashed content a few days ago. Now they can keep track of what the repository actually holds at all times, without typing a single command on terminal.</p>
            <p>Having a quick access to the base ingredients of Git is not just relieving, but also makes you more productive.</p>
        </div>

        <div class="feature-image-right">
            <img src="images/staging.png" class="shadow" />

            <h2>Staging</h2>
            <p>Staging is one key concept of Git that does not exist in other common version controls. When you want to commit something, you stage it first. In Git-GUI, staging is represented with two lists (staged and unstaged), and moving changes between them is easy.</p>
            <p>For example, if you want to commit 2 files out of 5 (leaving the other 3 untouched), you stage the two files you want and then you commit.</p>
        </div>

        <div class="feature-image-left">
            <img src="images/commit-panel.png" class="shadow" />

            <h2>Commit your changes</h2>
            <p>When it's time to commit, Git-GUI gives you a simple box to type in. It stretches and becomes bigger as you focus it and you have the possibility to copy previous commit messages.</p>
        </div>
    </div>
</body>
</html>